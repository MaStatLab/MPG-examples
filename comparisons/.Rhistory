a
a <- predict(fit1, i = 1, r = 1)
a
predict(fit1, i = 1, r = 1)
str(fit1)
fit1$grid
plot(fit1$grid)
par(mfrow= c(1,1))
plot(fit1$grid)
str(fit1)
fit1$save.state$thetasave
str(fit1$save.state$thetasave)
names(fit1$save.state$thetasave)
colnames(fit1$save.state$thetasave)
fit1$save.state$thetasave[c("sigma11", "sigma12", "sigma22")]
fit1$save.state$thetasave[, c("sigma11", "sigma12", "sigma22")]
fit1$coefficients
str(fit1)
fit1$state$muclus
dim(fit1$state$muclus)
head(fit1$state$muclus)
str(fit1)
fit1$save.state$randsave
head(fit1$save.state$randsave)
str(fit1)
fit1$ss
fit1$state$ss
fit1$state$sc
fit1$state$ss
fit1$save.state$thetasave[, c("sigma11", "sigma12", "sigma22")]
str(fit1)
fit1$state$sigma
fit1$state$ss[i]
i <-1
fit1$state$ss[i]
fit1$state$sc[fit1$state$ss[i]]
fit1$state$muclus[fit1$state$ss[i], fit1$state$sc[fit1$state$ss[i]]]
i <- 2
fit1$state$ss[i]
fit1$state$sc[fit1$state$ss[i]]
fit1$state$muclus[fit1$state$ss[i], fit1$state$sc[fit1$state$ss[i]]]
i <- 3
fit1$state$ss[i]
fit1$state$sc[fit1$state$ss[i]]
fit1$state$muclus[fit1$state$ss[i], fit1$state$sc[fit1$state$ss[i]]]
i <- 4
fit1$state$ss[i]
fit1$state$sc[fit1$state$ss[i]]
fit1$state$muclus[fit1$state$ss[i], fit1$state$sc[fit1$state$ss[i]]]
fit1$state$ss
fit1$state$sc
fit1$state$muclus
fit1$state$muclus[fit1$state$ss[i], ]
fit1$state$ss
plot(fit1$state$muclus[fit1$state$ss, ])
fit1$state$muclus[fit1$state$ss, ]
plot(fit1$state$muclus[fit1$state$ss, ] + rnorm(J * n))
J <- 2
jitter <- cbind(rnorm(J * n), rnorm(J * n))
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
jitter <- cbind(rnorm(J * n, 0, .1), rnorm(J * n, 0, .1))
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
sigma.j <- .01
jitter <- cbind(rnorm(J * n, 0, sigma.j), rnorm(J * n, 0, sigma.j))
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
points(Y1)
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
points(Y1, col = "red")
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
points(Y1, col = "blue")
plot(fit1$state$muclus[fit1$state$ss, ] + jitter)
points(Y2, col = "blue")
plot(as.matrix(fit1$state$muclus[fit1$state$ss, ]) + jitter)
points(Y1, col = "red")
points(Y2, col = "blue")
str(fit1)
diag(c(1,1))
fit1 <- HDPMdensity(y=Y,
study=C,
prior=make.prior(Y, J),
mcmc=mcmc,
xpred=diag(c(1,1)),
# state=state,
status=TRUE)
data <- data.frame(Y = Y, C = C)
data
data <- list(Y = Y, C = C)
data
fit1 <- HDPMdensity(formula = y ~ 1,
study = ~C,
prior=make.prior(Y, J),
mcmc=mcmc,
# state=state,
status=TRUE)
fit1 <- HDPMdensity(formula = y ~ 1,
study = ~C,
prior=make.prior(Y, J),
mcmc=mcmc,
data = data,
# state=state,
status=TRUE)
fit1 <- HDPMdensity(y=Y,
study=C,
prior=make.prior(Y, J),
mcmc=mcmc,
# state=state,
status=TRUE)
Y1 <- cbind(c(rnorm(n / 2, 10), rnorm(n / 2)), rnorm(n))
Y2 <- cbind(rnorm(n), rnorm(n))
library(DPpackage)
n <- 100
J <- 2
Y1 <- cbind(c(rnorm(n / 2, 10), rnorm(n / 2)), rnorm(n))
Y2 <- cbind(rnorm(n), rnorm(n))
Y <- rbind(Y1, Y2)
C <- c(rep(1, n), rep(2, n))
plot(Y1, col = "red")
points(Y2, col = "blue")
Y1 <- cbind(c(rnorm(n / 2, 10), rnorm(n / 2)), rnorm(n))
Y2 <- cbind(c(rnorm(n / 2, -10), rnorm(n / 2)), rnorm(n))
Y <- rbind(Y1, Y2)
C <- c(rep(1, n), rep(2, n))
plot(Y1, col = "red", xlim = c(-12, 12))
points(Y2, col = "blue")
mcmc <- list(nburn=5000,
nsave=1000,
nskip=1,
ndisplay=10000)
make.prior=function(y, J){
return(
list(pe1=0.1,
pe0=0.1,
ae=1,
be=1,
a0=rep(1,J+1),
b0=rep(1,J+1),
nu=9,
tinv=0.25*var(y),
m0=apply(y,2,mean),
S0=var(y),
nub=9,
tbinv=var(y)))
}
fit1 <- HDPMdensity(y=Y,
study=C,
prior=make.prior(Y, J),
mcmc=mcmc,
status=TRUE)
fit1$state$sigma
fit1$state$ss
fit1$state$sc
fit1$state$muclus
sigma.j <- .01
jitter <- cbind(rnorm(J * n, 0, sigma.j), rnorm(J * n, 0, sigma.j))
plot(as.matrix(fit1$state$muclus[fit1$state$ss, ]) + jitter)
points(Y2, col = "blue")
points(Y2, col = "blue")
points(Y1, col = "red")
as.matrix(fit1$state$muclus[fit1$state$ss, ])
fit1$state$sigma
mu1 <- cbind(c(rep(n / 2, 10), rep(n / 2, 0)), rep(n, 0))
mu1
c(rep(n / 2, 10), rep(n / 2, 0))
mu1 <- cbind(c(rep(10, n / 2), rep(0, n / 2)), rep(0, n))
mu1
mu1 <- cbind(c(rep(10, n / 2), rep(0, n / 2)), rep(0, n))
sample_data <- function(n, seed = 1) {
K = 4
p = 4
G = 3
mu = array(NA, dim=c(K,G,p))
Sigma = array(NA, dim=c(K,p,p) )
probs = matrix( rep ( c( 0.3, 0.3, 0.2, 0.2), G), ncol = K, byrow=TRUE )
set.seed(seed)
for( k in 1:K)
mu[k,,] = matrix( rep( runif(p, min = 0, max=10), G ), ncol = p, byrow=TRUE )
mu[,2,] = mu[,1,] + .1
mu[,3,] = mu[,1,] - .1
Sigma[1,,] = diag(rep(0.7,p)) + 0.2
Sigma[2,,] = diag(rep(1,p)) + 1
Sigma[3,,] = diag(rep(.5,p)) - 0.1
Sigma[4,,] = diag(rep(.1,p))
mixture.components = matrix(NA, nrow = G, ncol = K)
mix.com.sum = matrix(0, nrow = G, ncol = K + 1)
for(j in 1:G)
{
mixture.components[j,] = table( factor(sample(K, n, replace=TRUE, prob=probs[j,]),levels=1:K) )
mix.com.sum[j,2:(K+1)] = cumsum(mixture.components[j,])
}
data = array(NA, dim=c(G,n,p))
class = matrix(NA, nrow=G, ncol = n)
for(k in 1:K)
{
for(j in 1:G)
{
if( mix.com.sum[j,k] < mix.com.sum[j,k+1]  )
{
data[j,(mix.com.sum[j,k]+1):mix.com.sum[j,k+1],] =
mvrnorm(mixture.components[j,k], mu[k,j,], Sigma[k,,])
class[j,(mix.com.sum[j,k]+1):mix.com.sum[j,k+1]] = k
}
}
}
Y = matrix(NA, nrow = G*n, ncol = p)
C = rep(NA, G*n)
for( j in 1:G)
{
Y[ ((j-1)*n+1):(j*n), ] = data[j,,]
C[((j-1)*n+1):(j*n)] = j-1
}
C0 = C[sample(1:(n*G),n*G)]
return( list(Y=Y, C=C, C0=C0, G=G, mu = mu, Sigma = Sigma, class = class))
}
data <- sample_data(50)
data
str(FIT1)
str(fit1)
fit1$save.state$thetasave
head(fit1$save.state$thetasave)
head(fit1$save.state$randsave)
tail(fit1$save.state$randsave)
str(fit1)
library(dplyr)
path.skeleton <- file.path("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking",
"examples/2016_10_17/methods_comparison/%s/%s")
example <- "shift1"
input.path <- sprintf(path.skeleton, "data", example)
output.path <- sprintf(path.skeleton, "results", example)
ntest <- 100
K <- 100
run_MPG(ntest, K, truncation_type = "fixed", input.path, output.path)
run_MPG(ntest, K, truncation_type = "adaptive", input.path, output.path)
LoadData <- function(i, path) {
require(dplyr)
n.classes <- 3
Y0 <- dplyr::bind_rows(lapply(1:n.classes, function(c) {
read.csv(file.path(path, paste0(i, "null", c, ".csv")), sep = "\t")
}))
Y1 <- dplyr::bind_rows(lapply(1:n.classes, function(c) {
read.csv(file.path(path, paste0(i, "alt", c, ".csv")), sep = "\t")
}))
n <- nrow(Y0) / n.classes
C <- c(rep(0, n), rep(1, n), rep(2, n))
return(list(Y0 = Y0, C0 = C, Y1 = Y1, C1 = C))
}
run_MPG <- function(ntest, K, truncation_type, input.path, output.path)
{
require(MPG)
prior = list( K = K, truncation_type = truncation_type)
mcmc <- list( nburn=5000,
nsave=1000,
nskip=1,
ndisplay=NA)
dir.create(output.path, recursive = TRUE)
for(i in 1:ntest)
{
print(paste("iteration", i))
data <- LoadData(i, input.path)
ans1 = mpg(data$Y1, data$C1 + 1, prior = prior, mcmc = mcmc )
output_rho_1 = mean(ans1$chain$rho)
output_epsilon_1 = mean(ans1$chain$epsilon)
ans0 = mpg(data$Y0, data$C0 + 1, prior = prior, mcmc = mcmc)
output_rho_0 = mean(ans0$chain$rho)
output_epsilon_0 = mean(ans0$chain$epsilon)
write(c(output_rho_1,
output_epsilon_1,
output_rho_0,
output_epsilon_0,
i), file = file.path(output.path,
paste0("mpg_", truncation_type, ".csv")),
ncolumns = 5,
append = TRUE, sep = " ")
}
}
###########################
make.prior=function(y, J){
return(
list(pe1=0.1,
pe0=0.1,
ae=1,
be=1,
a0=rep(1,J+1),
b0=rep(1,J+1),
nu=9,
tinv=0.25*var(y),
m0=apply(y,2,mean),
S0=var(y),
nub=9,
tbinv=var(y)))
}
run_muller <- function(ntest, input.path, output.path)
{
mcmc <- list(nburn=5000,
nsave=1000,
nskip=1,
ndisplay=10000)
for(i in 1:ntest)
{
print(paste("iteration", i))
data <- LoadData(i, input.path)
fit1 <- HDPMdensity(y=data$Y1,
study=data$C1+1,
prior=make.prior(data$Y1, data$n.classes),
mcmc=mcmc,
state=state,
status=TRUE)
alt = mean(fit1$coef["eps"])
fit0 <- HDPMdensity(y=data$Y0,
study=data$C0+1,
prior=make.prior(data$Y1, data$n.classes),
mcmc=mcmc,
state=state,
status=TRUE)
null = mean(fit0$coef["eps"])
write(c(alt,null,i), file = output.path,
ncolumns = 3,
append = TRUE, sep = " ")
}
}
roc.plot = function(out, title_name = "", leg=TRUE)
{
require(ROCR)
methods_names = colnames(out$H0)
nmethods = length(methods_names)
tmp = c(na.omit(c(out$H0[,1], out$H1[,1])))
pred = prediction( tmp , c(rep(1,length(tmp)/2),rep(0,length(tmp)/2)))
perf = performance(pred,"tpr","fpr")
plot(perf,xlim=c(0,1), ylim=c(0,1), colorize=FALSE, lwd=4, lty=1,
main=title_name,  ylab="TPR", xlab="FPR")
for(i in 2:nmethods){
tmp =  c(na.omit(c(out$H0[,i], out$H1[,i])))
pred = prediction( tmp , c(rep(1,length(tmp)/2),rep(0,length(tmp)/2)))
perf = performance(pred,"tpr","fpr")
plot(perf,xlim=c(0,1),ylim=c(0,1),colorize=FALSE,lwd=4, lty=i,add=TRUE, col=i)
}
if(leg)
legend("bottomright", legend=methods_names,
col=seq(1,nmethods), lwd=4, lty=seq(1,nmethods), cex = 2)
}
library(dplyr)
path.skeleton <- file.path("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking",
"examples/2016_10_17/methods_comparison/%s/%s")
example <- "shift1"
input.path <- sprintf(path.skeleton, "data", example)
output.path <- sprintf(path.skeleton, "results", example)
ntest <- 100
K <- 100
run_MPG(ntest, K, truncation_type = "fixed", input.path, output.path)
run_MPG(ntest, K, truncation_type = "adaptive", input.path, output.path)
MPG.fixed <- read.csv(file.path(output.path, "mpg_fixed.csv"),
header = FALSE, sep = " ")
MPG.adapt <- read.csv(file.path(output.path, "mpg_adaptive.csv"),
header = FALSE, sep = " ")
MPG.fixed
MPG.adapt
out <- list(H1 = cbind(MPG.fixed$V1,
MPG.adapt$V1,
results_muller[, 1],
HDPMM.alt$V1),
H0 = cbind(MPG.fixed$V2,
MPG.adapt$V2,
results_muller[, 2],
HDPMM.null$V1))
colnames(out$H0) = c("MPG fixed","MPG adapt.",
"Muller",
"HDPMM")
colnames(out$H1) = colnames(out$H0)
roc.plot(out, title_name = example, leg = TRUE)
out
out <- list(H1 = cbind(MPG.fixed$V1,
MPG.adapt$V1,
results_muller[, 1],
HDPMM.alt$V1),
H0 = cbind(MPG.fixed$V2,
MPG.adapt$V2,
results_muller[, 2],
HDPMM.null$V1))
load(file.path(output.path, paste0("muller_", example, ".Rdata")))
HDPMM.alt <- dplyr::bind_rows(read.csv(file.path(output.path,
"results_alt0.csv"),
header = FALSE),
read.csv(file.path(output.path,
"results_alt1.csv"),
header = FALSE))
HDPMM.null <- dplyr::bind_rows(read.csv(file.path(output.path,
"results_null0.csv"),
header = FALSE),
read.csv(file.path(output.path,
"results_null1.csv"),
header = FALSE))
out <- list(H1 = cbind(MPG.fixed$V1,
MPG.adapt$V1,
results_muller[, 1],
HDPMM.alt$V1),
H0 = cbind(MPG.fixed$V2,
MPG.adapt$V2,
results_muller[, 2],
HDPMM.null$V1))
colnames(out$H0) = c("MPG fixed","MPG adapt.",
"Muller",
"HDPMM")
colnames(out$H1) = colnames(out$H0)
roc.plot(out, title_name = example, leg = TRUE)
out <- list(H1 = cbind(MPG.fixed$V2,
MPG.adapt$V2,
results_muller[, 1],
HDPMM.alt$V1),
H0 = cbind(MPG.fixed$V1,
MPG.adapt$V1,
results_muller[, 2],
HDPMM.null$V1))
colnames(out$H0) = c("MPG fixed","MPG adapt.",
"Muller",
"HDPMM")
colnames(out$H1) = colnames(out$H0)
roc.plot(out, title_name = example, leg = TRUE)
options(stringsAsFactors = FALSE)
library(MPG)
library(MASS)
library(dplyr)
library(mclust)
library(DPpackage)
library(ROCR)
library(ggplot2)
setwd("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking/examples/2016_10_21/")
source("sample_data.R")
source("helpers.R")
source("plots.R")
setwd("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking/examples/2016_10_21/")
options(stringsAsFactors = FALSE)
library(MPG)
library(MASS)
library(dplyr)
library(mclust)
library(DPpackage)
library(ROCR)
library(ggplot2)
setwd("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking/examples/2016_10_21/comparisons/")
source("sample_data.R")
source("helpers.R")
source("plots.R")
K <- 100 # 100
# Number of observation per group.
n <- 100 # 100
# Number of simulations.
n.test <- 100 # 100
load("alien/shift1.rda")
load("alien/shiftall.rda")
load("alien/weight2.rda")
all.output <- dplyr::bind_rows(shift.1, shift.all, weight.2
)
theme_set(theme_gray(base_size = 18))
DistancePlot(all.output) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
par(mfrow = c(2, 2))
RocPlot(shift.1, legend = TRUE)
RocPlot(shift.all, legend = FALSE)
RocPlot(weight.2, legend = FALSE)
1:0
seq_len(0)
options(stringsAsFactors = FALSE)
library(MPG)
library(MASS)
library(dplyr)
library(mclust)
library(DPpackage)
library(ROCR)
library(ggplot2)
setwd("~/Dropbox/Duke/Thesis/locally_tied_stick_breaking/examples/2016_10_21/comparisons/")
source("sample_data.R")
source("helpers.R")
source("plots.R")
# Number of mixture components for MPG.
K <- 100 # 100
# Number of observation per group.
n <- 100 # 100
# Number of simulations.
n.test <- 100 # 100
load("alien//shift1.rda")
load("alien//shiftall.rda")
load("alien//weight2.rda")
load("alien//weightall.rda")
all.output <- dplyr::bind_rows(shift.1, shift.all, weight.2, weight.all)
distance.name <- "distance"
pdf(paste0(distance.name, ".pdf"), height = 5, width = 12)
theme_set(theme_gray(base_size = 18))
DistancePlot(all.output) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
dev.off()
setEPS()
postscript(paste0(distance.name, ".eps"), height = 5, width = 12)
theme_set(theme_gray(base_size = 18))
DistancePlot(all.output) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
dev.off()
# ROC curves
roc.name <- "roc"
pdf(paste0(roc.name, ".pdf"), height = 12, width = 12)
par(mfrow = c(2, 2))
RocPlot(shift.1, legend = TRUE)
RocPlot(shift.all, legend = FALSE)
RocPlot(weight.2, legend = FALSE)
RocPlot(weight.all, legend = FALSE)
dev.off()
setEPS()
postscript(paste0(roc.name, ".eps"), height = 12, width = 12)
par(mfrow = c(2, 2))
RocPlot(shift.1, legend = TRUE)
RocPlot(shift.all, legend = FALSE)
RocPlot(weight.2, legend = FALSE)
RocPlot(weight.all, legend = FALSE)
dev.off()
